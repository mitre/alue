[project]
name = "alue"
version = "0.1.0"
description = "Benchmark large language models on aerospace data and tasks."
readme = "README.md"
authors = [
    { name = "Kunal K. Sarkhel", email = "ksarkhel@mitre.org" },
    { name = "Eugene Mangortey", email = "emangortey@mitre.org" },
    { name = "Shuo Chen", email = "chen@mitre.org" },
    { name = "Satyen Singh", email = "ssingh@mitre.org" },
]
license = { text = "Apache-2.0" }
keywords = ["llm", "evaluation", "faa", "ai"] # Relevant keywords
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
# NOTE: aip-faa-llm-eval uses Python 3.10.10 by default
requires-python = ">=3.10"
dependencies = [
    "SQLAlchemy==1.4.2",
    "nltk==3.8.1",
    "numpy>=1.24.1",
    "transformers>=4.51.1",
    "bitsandbytes",
    "dash",
    "dash-bootstrap-components",
    "openpyxl",
    "jiwer",
    "scikit-learn",
    "huggingface_hub",
    "chroma-haystack",
    "torch>=2.1.2",
    "clean-text",
    "pydantic",
    "outlines>=0.1.11",
    "sentencepiece",
    "accelerate",
    "sentence-transformers",
    "datasets",
    "seqeval",
    "peft",
    "vllm>=0.9.1",
]

[dependency-groups]
dev = [
    "basedpyright>=1.31.0",
    "codespell>=2.4.1",
    "funlog>=0.2.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-sugar>=1.0.0",
    "rich>=14.0.0",
    "ruff>=0.12.2",
]

[tool.ruff]
# Exclude common directories that are typically not part of the source code or are generated by tools.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "squad_evaluation.py",  # do not modify
]
#line-length = 88

[tool.ruff.lint]
select = [
    "D",  # pydocstyle (D)
    "F",  # pyflakes (F)
    "E",  # pycodestyle Error (E)
    "W",  # pycodestyle Warning (W)
    "I001",  # isort-unsorted-imports (I001),
    "S",  # bandit security rules (S)
    "I",  # isort (I)
    "B",  # flake8-bugbear (B)
    "SIM",  # flake8-simplify (SIM)
]
extend-select = [
  "UP",  # pyupgrade
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public module
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public packages
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D200", # One-line docstrings should fit on one line
    "E501", # Line too long
    "D205",
    "D400", # First line should end in a period
    "D401",
]

[tool.ruff.format]
# Enforce double quotes for strings, following Black's style.
quote-style = "double"

# Use spaces for indentation, in line with Black's formatting style.
indent-style = "space"

# Keep magic trailing commas, a feature of Black's formatting.
skip-magic-trailing-comma = false

# Automatically detect and use the appropriate line ending style.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "numpy"  # Accepts: "google", "numpy", or "pep257"

[tool.basedpyright]
include = ["tests"]
# By default BasedPyright is very strict, so you almost certainly want to disable
# some of the rules. First, these turn off warnings about (yes) how you ignore
# warnings:
reportIgnoreCommentWithoutRule = false
reportUnnecessaryTypeIgnoreComment = false
# A few typically noisy warnings are next.
reportMissingTypeStubs = false
reportUnusedCallResult = false
reportAny = false
reportImplicitStringConcatenation = false
reportUnreachable = false
# reportPrivateImportUsage = false
# reportPrivateLocalImportUsage = false
# reportMissingImports = false
# reportUnnecessaryIsInstance = false
reportUnknownVariableType = false
reportUnknownArgumentType = false

[tool.codespell]
# Add here as needed:
# ignore-words-list = "foo,bar"
# skip = "foo.py,bar.py"

[tool.pytest.ini_options]
python_files = ["*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = [
    "tests",
]
norecursedirs = []
filterwarnings = []
